/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: User.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace user {
    export class CreateUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            last_name?: string;
            password?: string;
            refresh_token?: string;
            is_active?: boolean;
            email?: string;
            address?: string;
            location_s3?: string;
            verification_code?: string;
            expire_verification_code?: string;
            role_id?: string;
            permission_ids?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [12], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("last_name" in data && data.last_name != undefined) {
                    this.last_name = data.last_name;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
                if ("is_active" in data && data.is_active != undefined) {
                    this.is_active = data.is_active;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("location_s3" in data && data.location_s3 != undefined) {
                    this.location_s3 = data.location_s3;
                }
                if ("verification_code" in data && data.verification_code != undefined) {
                    this.verification_code = data.verification_code;
                }
                if ("expire_verification_code" in data && data.expire_verification_code != undefined) {
                    this.expire_verification_code = data.expire_verification_code;
                }
                if ("role_id" in data && data.role_id != undefined) {
                    this.role_id = data.role_id;
                }
                if ("permission_ids" in data && data.permission_ids != undefined) {
                    this.permission_ids = data.permission_ids;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get last_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set last_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_active() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_active(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get location_s3() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set location_s3(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get verification_code() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set verification_code(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get expire_verification_code() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set expire_verification_code(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get role_id() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set role_id(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get permission_ids() {
            return pb_1.Message.getFieldWithDefault(this, 12, []) as string[];
        }
        set permission_ids(value: string[]) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            name?: string;
            last_name?: string;
            password?: string;
            refresh_token?: string;
            is_active?: boolean;
            email?: string;
            address?: string;
            location_s3?: string;
            verification_code?: string;
            expire_verification_code?: string;
            role_id?: string;
            permission_ids?: string[];
        }): CreateUserRequest {
            const message = new CreateUserRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.last_name != null) {
                message.last_name = data.last_name;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            if (data.is_active != null) {
                message.is_active = data.is_active;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.location_s3 != null) {
                message.location_s3 = data.location_s3;
            }
            if (data.verification_code != null) {
                message.verification_code = data.verification_code;
            }
            if (data.expire_verification_code != null) {
                message.expire_verification_code = data.expire_verification_code;
            }
            if (data.role_id != null) {
                message.role_id = data.role_id;
            }
            if (data.permission_ids != null) {
                message.permission_ids = data.permission_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                last_name?: string;
                password?: string;
                refresh_token?: string;
                is_active?: boolean;
                email?: string;
                address?: string;
                location_s3?: string;
                verification_code?: string;
                expire_verification_code?: string;
                role_id?: string;
                permission_ids?: string[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.last_name != null) {
                data.last_name = this.last_name;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            if (this.is_active != null) {
                data.is_active = this.is_active;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.location_s3 != null) {
                data.location_s3 = this.location_s3;
            }
            if (this.verification_code != null) {
                data.verification_code = this.verification_code;
            }
            if (this.expire_verification_code != null) {
                data.expire_verification_code = this.expire_verification_code;
            }
            if (this.role_id != null) {
                data.role_id = this.role_id;
            }
            if (this.permission_ids != null) {
                data.permission_ids = this.permission_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.last_name.length)
                writer.writeString(2, this.last_name);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (this.refresh_token.length)
                writer.writeString(4, this.refresh_token);
            if (this.is_active != false)
                writer.writeBool(5, this.is_active);
            if (this.email.length)
                writer.writeString(6, this.email);
            if (this.address.length)
                writer.writeString(7, this.address);
            if (this.location_s3.length)
                writer.writeString(8, this.location_s3);
            if (this.verification_code.length)
                writer.writeString(9, this.verification_code);
            if (this.expire_verification_code.length)
                writer.writeString(10, this.expire_verification_code);
            if (this.role_id.length)
                writer.writeString(11, this.role_id);
            if (this.permission_ids.length)
                writer.writeRepeatedString(12, this.permission_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.last_name = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    case 4:
                        message.refresh_token = reader.readString();
                        break;
                    case 5:
                        message.is_active = reader.readBool();
                        break;
                    case 6:
                        message.email = reader.readString();
                        break;
                    case 7:
                        message.address = reader.readString();
                        break;
                    case 8:
                        message.location_s3 = reader.readString();
                        break;
                    case 9:
                        message.verification_code = reader.readString();
                        break;
                    case 10:
                        message.expire_verification_code = reader.readString();
                        break;
                    case 11:
                        message.role_id = reader.readString();
                        break;
                    case 12:
                        pb_1.Message.addToRepeatedField(message, 12, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateUserRequest {
            return CreateUserRequest.deserialize(bytes);
        }
    }
    export class RegisterUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
        }): RegisterUserRequest {
            const message = new RegisterUserRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterUserRequest {
            return RegisterUserRequest.deserialize(bytes);
        }
    }
    export class RegisterMediaUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            picture?: string;
            givenName?: string;
            familyName?: string;
            sub?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("picture" in data && data.picture != undefined) {
                    this.picture = data.picture;
                }
                if ("givenName" in data && data.givenName != undefined) {
                    this.givenName = data.givenName;
                }
                if ("familyName" in data && data.familyName != undefined) {
                    this.familyName = data.familyName;
                }
                if ("sub" in data && data.sub != undefined) {
                    this.sub = data.sub;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get picture() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set picture(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get givenName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set givenName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get familyName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set familyName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get sub() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set sub(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            email?: string;
            picture?: string;
            givenName?: string;
            familyName?: string;
            sub?: string;
        }): RegisterMediaUserRequest {
            const message = new RegisterMediaUserRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.picture != null) {
                message.picture = data.picture;
            }
            if (data.givenName != null) {
                message.givenName = data.givenName;
            }
            if (data.familyName != null) {
                message.familyName = data.familyName;
            }
            if (data.sub != null) {
                message.sub = data.sub;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                picture?: string;
                givenName?: string;
                familyName?: string;
                sub?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.picture != null) {
                data.picture = this.picture;
            }
            if (this.givenName != null) {
                data.givenName = this.givenName;
            }
            if (this.familyName != null) {
                data.familyName = this.familyName;
            }
            if (this.sub != null) {
                data.sub = this.sub;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.picture.length)
                writer.writeString(2, this.picture);
            if (this.givenName.length)
                writer.writeString(3, this.givenName);
            if (this.familyName.length)
                writer.writeString(4, this.familyName);
            if (this.sub.length)
                writer.writeString(5, this.sub);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterMediaUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterMediaUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.picture = reader.readString();
                        break;
                    case 3:
                        message.givenName = reader.readString();
                        break;
                    case 4:
                        message.familyName = reader.readString();
                        break;
                    case 5:
                        message.sub = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterMediaUserRequest {
            return RegisterMediaUserRequest.deserialize(bytes);
        }
    }
    export class CreateUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
            user?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 2) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            message?: string;
            user?: ReturnType<typeof User.prototype.toObject>;
        }): CreateUserResponse {
            const message = new CreateUserResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                user?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (this.has_user)
                writer.writeMessage(2, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateUserResponse {
            return CreateUserResponse.deserialize(bytes);
        }
    }
    export class RegisterMediaUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
            user?: User;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 2) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            message?: string;
            user?: ReturnType<typeof User.prototype.toObject>;
            token?: string;
        }): RegisterMediaUserResponse {
            const message = new RegisterMediaUserResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                user?: ReturnType<typeof User.prototype.toObject>;
                token?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (this.has_user)
                writer.writeMessage(2, this.user, () => this.user.serialize(writer));
            if (this.token.length)
                writer.writeString(3, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterMediaUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterMediaUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    case 3:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterMediaUserResponse {
            return RegisterMediaUserResponse.deserialize(bytes);
        }
    }
    export class GetUserByIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): GetUserByIdRequest {
            const message = new GetUserByIdRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserByIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserByIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserByIdRequest {
            return GetUserByIdRequest.deserialize(bytes);
        }
    }
    export class GetUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetUserRequest {
            const message = new GetUserRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserRequest {
            return GetUserRequest.deserialize(bytes);
        }
    }
    export class GetUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            users?: User[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
            }
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, User, 1) as User[];
        }
        set users(value: User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            users?: ReturnType<typeof User.prototype.toObject>[];
        }): GetUserResponse {
            const message = new GetUserResponse({});
            if (data.users != null) {
                message.users = data.users.map(item => User.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                users?: ReturnType<typeof User.prototype.toObject>[];
            } = {};
            if (this.users != null) {
                data.users = this.users.map((item: User) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.users.length)
                writer.writeRepeatedMessage(1, this.users, (item: User) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, User.deserialize(reader), User));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserResponse {
            return GetUserResponse.deserialize(bytes);
        }
    }
    export class GetUserByIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
        }): GetUserByIdResponse {
            const message = new GetUserByIdResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserByIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserByIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserByIdResponse {
            return GetUserByIdResponse.deserialize(bytes);
        }
    }
    export class UpdateUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            last_name?: string;
            password?: string;
            refresh_token?: string;
            is_active?: boolean;
            email?: string;
            address?: string;
            location_s3?: string;
            verification_code?: string;
            expire_verification_code?: string;
            role_id?: string;
            permission_ids?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("last_name" in data && data.last_name != undefined) {
                    this.last_name = data.last_name;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
                if ("is_active" in data && data.is_active != undefined) {
                    this.is_active = data.is_active;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("location_s3" in data && data.location_s3 != undefined) {
                    this.location_s3 = data.location_s3;
                }
                if ("verification_code" in data && data.verification_code != undefined) {
                    this.verification_code = data.verification_code;
                }
                if ("expire_verification_code" in data && data.expire_verification_code != undefined) {
                    this.expire_verification_code = data.expire_verification_code;
                }
                if ("role_id" in data && data.role_id != undefined) {
                    this.role_id = data.role_id;
                }
                if ("permission_ids" in data && data.permission_ids != undefined) {
                    this.permission_ids = data.permission_ids;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get last_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set last_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get is_active() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set is_active(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get location_s3() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set location_s3(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get verification_code() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set verification_code(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get expire_verification_code() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set expire_verification_code(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get role_id() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set role_id(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get permission_ids() {
            return pb_1.Message.getFieldWithDefault(this, 13, []) as string[];
        }
        set permission_ids(value: string[]) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            last_name?: string;
            password?: string;
            refresh_token?: string;
            is_active?: boolean;
            email?: string;
            address?: string;
            location_s3?: string;
            verification_code?: string;
            expire_verification_code?: string;
            role_id?: string;
            permission_ids?: string[];
        }): UpdateUserRequest {
            const message = new UpdateUserRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.last_name != null) {
                message.last_name = data.last_name;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            if (data.is_active != null) {
                message.is_active = data.is_active;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.location_s3 != null) {
                message.location_s3 = data.location_s3;
            }
            if (data.verification_code != null) {
                message.verification_code = data.verification_code;
            }
            if (data.expire_verification_code != null) {
                message.expire_verification_code = data.expire_verification_code;
            }
            if (data.role_id != null) {
                message.role_id = data.role_id;
            }
            if (data.permission_ids != null) {
                message.permission_ids = data.permission_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                last_name?: string;
                password?: string;
                refresh_token?: string;
                is_active?: boolean;
                email?: string;
                address?: string;
                location_s3?: string;
                verification_code?: string;
                expire_verification_code?: string;
                role_id?: string;
                permission_ids?: string[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.last_name != null) {
                data.last_name = this.last_name;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            if (this.is_active != null) {
                data.is_active = this.is_active;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.location_s3 != null) {
                data.location_s3 = this.location_s3;
            }
            if (this.verification_code != null) {
                data.verification_code = this.verification_code;
            }
            if (this.expire_verification_code != null) {
                data.expire_verification_code = this.expire_verification_code;
            }
            if (this.role_id != null) {
                data.role_id = this.role_id;
            }
            if (this.permission_ids != null) {
                data.permission_ids = this.permission_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.last_name.length)
                writer.writeString(3, this.last_name);
            if (this.password.length)
                writer.writeString(4, this.password);
            if (this.refresh_token.length)
                writer.writeString(5, this.refresh_token);
            if (this.is_active != false)
                writer.writeBool(6, this.is_active);
            if (this.email.length)
                writer.writeString(7, this.email);
            if (this.address.length)
                writer.writeString(8, this.address);
            if (this.location_s3.length)
                writer.writeString(9, this.location_s3);
            if (this.verification_code.length)
                writer.writeString(10, this.verification_code);
            if (this.expire_verification_code.length)
                writer.writeString(11, this.expire_verification_code);
            if (this.role_id.length)
                writer.writeString(12, this.role_id);
            if (this.permission_ids.length)
                writer.writeRepeatedString(13, this.permission_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.last_name = reader.readString();
                        break;
                    case 4:
                        message.password = reader.readString();
                        break;
                    case 5:
                        message.refresh_token = reader.readString();
                        break;
                    case 6:
                        message.is_active = reader.readBool();
                        break;
                    case 7:
                        message.email = reader.readString();
                        break;
                    case 8:
                        message.address = reader.readString();
                        break;
                    case 9:
                        message.location_s3 = reader.readString();
                        break;
                    case 10:
                        message.verification_code = reader.readString();
                        break;
                    case 11:
                        message.expire_verification_code = reader.readString();
                        break;
                    case 12:
                        message.role_id = reader.readString();
                        break;
                    case 13:
                        pb_1.Message.addToRepeatedField(message, 13, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserRequest {
            return UpdateUserRequest.deserialize(bytes);
        }
    }
    export class UpdateUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
            user?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 2) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            message?: string;
            user?: ReturnType<typeof User.prototype.toObject>;
        }): UpdateUserResponse {
            const message = new UpdateUserResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                user?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (this.has_user)
                writer.writeMessage(2, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserResponse {
            return UpdateUserResponse.deserialize(bytes);
        }
    }
    export class DeleteUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): DeleteUserRequest {
            const message = new DeleteUserRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserRequest {
            return DeleteUserRequest.deserialize(bytes);
        }
    }
    export class DeleteUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): DeleteUserResponse {
            const message = new DeleteUserResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserResponse {
            return DeleteUserResponse.deserialize(bytes);
        }
    }
    export class User extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            last_name?: string;
            password?: string;
            refresh_token?: string;
            is_active?: boolean;
            email?: string;
            address?: string;
            location_s3?: string;
            verification_code?: string;
            expire_verification_code?: string;
            role?: Role;
            permissions?: Permission[];
            scoreBlitz?: number;
            scoreRapid?: number;
            scoreBullet?: number;
            lastActivity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("last_name" in data && data.last_name != undefined) {
                    this.last_name = data.last_name;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
                if ("is_active" in data && data.is_active != undefined) {
                    this.is_active = data.is_active;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("location_s3" in data && data.location_s3 != undefined) {
                    this.location_s3 = data.location_s3;
                }
                if ("verification_code" in data && data.verification_code != undefined) {
                    this.verification_code = data.verification_code;
                }
                if ("expire_verification_code" in data && data.expire_verification_code != undefined) {
                    this.expire_verification_code = data.expire_verification_code;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("permissions" in data && data.permissions != undefined) {
                    this.permissions = data.permissions;
                }
                if ("scoreBlitz" in data && data.scoreBlitz != undefined) {
                    this.scoreBlitz = data.scoreBlitz;
                }
                if ("scoreRapid" in data && data.scoreRapid != undefined) {
                    this.scoreRapid = data.scoreRapid;
                }
                if ("scoreBullet" in data && data.scoreBullet != undefined) {
                    this.scoreBullet = data.scoreBullet;
                }
                if ("lastActivity" in data && data.lastActivity != undefined) {
                    this.lastActivity = data.lastActivity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get last_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set last_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get is_active() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set is_active(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get location_s3() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set location_s3(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get verification_code() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set verification_code(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get expire_verification_code() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set expire_verification_code(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get role() {
            return pb_1.Message.getWrapperField(this, Role, 12) as Role;
        }
        set role(value: Role) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_role() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get permissions() {
            return pb_1.Message.getRepeatedWrapperField(this, Permission, 13) as Permission[];
        }
        set permissions(value: Permission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 13, value);
        }
        get scoreBlitz() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set scoreBlitz(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get scoreRapid() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set scoreRapid(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get scoreBullet() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set scoreBullet(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get lastActivity() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set lastActivity(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            last_name?: string;
            password?: string;
            refresh_token?: string;
            is_active?: boolean;
            email?: string;
            address?: string;
            location_s3?: string;
            verification_code?: string;
            expire_verification_code?: string;
            role?: ReturnType<typeof Role.prototype.toObject>;
            permissions?: ReturnType<typeof Permission.prototype.toObject>[];
            scoreBlitz?: number;
            scoreRapid?: number;
            scoreBullet?: number;
            lastActivity?: string;
        }): User {
            const message = new User({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.last_name != null) {
                message.last_name = data.last_name;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            if (data.is_active != null) {
                message.is_active = data.is_active;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.location_s3 != null) {
                message.location_s3 = data.location_s3;
            }
            if (data.verification_code != null) {
                message.verification_code = data.verification_code;
            }
            if (data.expire_verification_code != null) {
                message.expire_verification_code = data.expire_verification_code;
            }
            if (data.role != null) {
                message.role = Role.fromObject(data.role);
            }
            if (data.permissions != null) {
                message.permissions = data.permissions.map(item => Permission.fromObject(item));
            }
            if (data.scoreBlitz != null) {
                message.scoreBlitz = data.scoreBlitz;
            }
            if (data.scoreRapid != null) {
                message.scoreRapid = data.scoreRapid;
            }
            if (data.scoreBullet != null) {
                message.scoreBullet = data.scoreBullet;
            }
            if (data.lastActivity != null) {
                message.lastActivity = data.lastActivity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                last_name?: string;
                password?: string;
                refresh_token?: string;
                is_active?: boolean;
                email?: string;
                address?: string;
                location_s3?: string;
                verification_code?: string;
                expire_verification_code?: string;
                role?: ReturnType<typeof Role.prototype.toObject>;
                permissions?: ReturnType<typeof Permission.prototype.toObject>[];
                scoreBlitz?: number;
                scoreRapid?: number;
                scoreBullet?: number;
                lastActivity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.last_name != null) {
                data.last_name = this.last_name;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            if (this.is_active != null) {
                data.is_active = this.is_active;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.location_s3 != null) {
                data.location_s3 = this.location_s3;
            }
            if (this.verification_code != null) {
                data.verification_code = this.verification_code;
            }
            if (this.expire_verification_code != null) {
                data.expire_verification_code = this.expire_verification_code;
            }
            if (this.role != null) {
                data.role = this.role.toObject();
            }
            if (this.permissions != null) {
                data.permissions = this.permissions.map((item: Permission) => item.toObject());
            }
            if (this.scoreBlitz != null) {
                data.scoreBlitz = this.scoreBlitz;
            }
            if (this.scoreRapid != null) {
                data.scoreRapid = this.scoreRapid;
            }
            if (this.scoreBullet != null) {
                data.scoreBullet = this.scoreBullet;
            }
            if (this.lastActivity != null) {
                data.lastActivity = this.lastActivity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.last_name.length)
                writer.writeString(3, this.last_name);
            if (this.password.length)
                writer.writeString(4, this.password);
            if (this.refresh_token.length)
                writer.writeString(5, this.refresh_token);
            if (this.is_active != false)
                writer.writeBool(6, this.is_active);
            if (this.email.length)
                writer.writeString(7, this.email);
            if (this.address.length)
                writer.writeString(8, this.address);
            if (this.location_s3.length)
                writer.writeString(9, this.location_s3);
            if (this.verification_code.length)
                writer.writeString(10, this.verification_code);
            if (this.expire_verification_code.length)
                writer.writeString(11, this.expire_verification_code);
            if (this.has_role)
                writer.writeMessage(12, this.role, () => this.role.serialize(writer));
            if (this.permissions.length)
                writer.writeRepeatedMessage(13, this.permissions, (item: Permission) => item.serialize(writer));
            if (this.scoreBlitz != 0)
                writer.writeInt32(14, this.scoreBlitz);
            if (this.scoreRapid != 0)
                writer.writeInt32(15, this.scoreRapid);
            if (this.scoreBullet != 0)
                writer.writeInt32(16, this.scoreBullet);
            if (this.lastActivity.length)
                writer.writeString(17, this.lastActivity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.last_name = reader.readString();
                        break;
                    case 4:
                        message.password = reader.readString();
                        break;
                    case 5:
                        message.refresh_token = reader.readString();
                        break;
                    case 6:
                        message.is_active = reader.readBool();
                        break;
                    case 7:
                        message.email = reader.readString();
                        break;
                    case 8:
                        message.address = reader.readString();
                        break;
                    case 9:
                        message.location_s3 = reader.readString();
                        break;
                    case 10:
                        message.verification_code = reader.readString();
                        break;
                    case 11:
                        message.expire_verification_code = reader.readString();
                        break;
                    case 12:
                        reader.readMessage(message.role, () => message.role = Role.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.permissions, () => pb_1.Message.addToRepeatedWrapperField(message, 13, Permission.deserialize(reader), Permission));
                        break;
                    case 14:
                        message.scoreBlitz = reader.readInt32();
                        break;
                    case 15:
                        message.scoreRapid = reader.readInt32();
                        break;
                    case 16:
                        message.scoreBullet = reader.readInt32();
                        break;
                    case 17:
                        message.lastActivity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
    export class Role extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
        }): Role {
            const message = new Role({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Role {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Role();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Role {
            return Role.deserialize(bytes);
        }
    }
    export class Permission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
        }): Permission {
            const message = new Permission({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Permission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Permission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Permission {
            return Permission.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedUserServiceService {
        static definition = {
            CreateUser: {
                path: "/user.UserService/CreateUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateUserResponse.deserialize(new Uint8Array(bytes))
            },
            GetUsers: {
                path: "/user.UserService/GetUsers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetUserResponse.deserialize(new Uint8Array(bytes))
            },
            GetUserById: {
                path: "/user.UserService/GetUserById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetUserByIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetUserByIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetUserByIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetUserByIdResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateUser: {
                path: "/user.UserService/UpdateUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateUserResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteUser: {
                path: "/user.UserService/DeleteUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteUserResponse.deserialize(new Uint8Array(bytes))
            },
            RegisterUser: {
                path: "/user.UserService/RegisterUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegisterUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegisterUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateUserResponse.deserialize(new Uint8Array(bytes))
            },
            RegisterMediaUser: {
                path: "/user.UserService/RegisterMediaUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegisterMediaUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegisterMediaUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RegisterMediaUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RegisterMediaUserResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateUser(call: grpc_1.ServerUnaryCall<CreateUserRequest, CreateUserResponse>, callback: grpc_1.sendUnaryData<CreateUserResponse>): void;
        abstract GetUsers(call: grpc_1.ServerUnaryCall<GetUserRequest, GetUserResponse>, callback: grpc_1.sendUnaryData<GetUserResponse>): void;
        abstract GetUserById(call: grpc_1.ServerUnaryCall<GetUserByIdRequest, GetUserByIdResponse>, callback: grpc_1.sendUnaryData<GetUserByIdResponse>): void;
        abstract UpdateUser(call: grpc_1.ServerUnaryCall<UpdateUserRequest, UpdateUserResponse>, callback: grpc_1.sendUnaryData<UpdateUserResponse>): void;
        abstract DeleteUser(call: grpc_1.ServerUnaryCall<DeleteUserRequest, DeleteUserResponse>, callback: grpc_1.sendUnaryData<DeleteUserResponse>): void;
        abstract RegisterUser(call: grpc_1.ServerUnaryCall<RegisterUserRequest, CreateUserResponse>, callback: grpc_1.sendUnaryData<CreateUserResponse>): void;
        abstract RegisterMediaUser(call: grpc_1.ServerUnaryCall<RegisterMediaUserRequest, RegisterMediaUserResponse>, callback: grpc_1.sendUnaryData<RegisterMediaUserResponse>): void;
    }
    export class UserServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedUserServiceService.definition, "UserService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateUser: GrpcUnaryServiceInterface<CreateUserRequest, CreateUserResponse> = (message: CreateUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateUserResponse>, callback?: grpc_1.requestCallback<CreateUserResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateUser(message, metadata, options, callback);
        };
        GetUsers: GrpcUnaryServiceInterface<GetUserRequest, GetUserResponse> = (message: GetUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetUserResponse>, callback?: grpc_1.requestCallback<GetUserResponse>): grpc_1.ClientUnaryCall => {
            return super.GetUsers(message, metadata, options, callback);
        };
        GetUserById: GrpcUnaryServiceInterface<GetUserByIdRequest, GetUserByIdResponse> = (message: GetUserByIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetUserByIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetUserByIdResponse>, callback?: grpc_1.requestCallback<GetUserByIdResponse>): grpc_1.ClientUnaryCall => {
            return super.GetUserById(message, metadata, options, callback);
        };
        UpdateUser: GrpcUnaryServiceInterface<UpdateUserRequest, UpdateUserResponse> = (message: UpdateUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateUserResponse>, callback?: grpc_1.requestCallback<UpdateUserResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateUser(message, metadata, options, callback);
        };
        DeleteUser: GrpcUnaryServiceInterface<DeleteUserRequest, DeleteUserResponse> = (message: DeleteUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteUserResponse>, callback?: grpc_1.requestCallback<DeleteUserResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteUser(message, metadata, options, callback);
        };
        RegisterUser: GrpcUnaryServiceInterface<RegisterUserRequest, CreateUserResponse> = (message: RegisterUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateUserResponse>, callback?: grpc_1.requestCallback<CreateUserResponse>): grpc_1.ClientUnaryCall => {
            return super.RegisterUser(message, metadata, options, callback);
        };
        RegisterMediaUser: GrpcUnaryServiceInterface<RegisterMediaUserRequest, RegisterMediaUserResponse> = (message: RegisterMediaUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RegisterMediaUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RegisterMediaUserResponse>, callback?: grpc_1.requestCallback<RegisterMediaUserResponse>): grpc_1.ClientUnaryCall => {
            return super.RegisterMediaUser(message, metadata, options, callback);
        };
    }
}
