/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/ban-types */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: Book.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from 'google-protobuf';
import * as grpc_1 from '@grpc/grpc-js';
export namespace book {
    export class Book extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: number;
                      title?: string;
                      description?: string;
                      image?: string;
                  },
        ) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('id' in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ('title' in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ('description' in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ('image' in data && data.image != undefined) {
                    this.image = data.image;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get image() {
            return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
        }
        set image(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: { id?: number; title?: string; description?: string; image?: string }): Book {
            const message = new Book({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.image != null) {
                message.image = data.image;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                title?: string;
                description?: string;
                image?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.image != null) {
                data.image = this.image;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0) writer.writeInt32(1, this.id);
            if (this.title.length) writer.writeString(2, this.title);
            if (this.description.length) writer.writeString(3, this.description);
            if (this.image.length) writer.writeString(4, this.image);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Book {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new Book();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.image = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Book {
            return Book.deserialize(bytes);
        }
    }
    export class CreateBookRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      title?: string;
                      description?: string;
                      image?: string;
                  },
        ) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('title' in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ('description' in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ('image' in data && data.image != undefined) {
                    this.image = data.image;
                }
            }
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get image() {
            return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
        }
        set image(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: { title?: string; description?: string; image?: string }): CreateBookRequest {
            const message = new CreateBookRequest({});
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.image != null) {
                message.image = data.image;
            }
            return message;
        }
        toObject() {
            const data: {
                title?: string;
                description?: string;
                image?: string;
            } = {};
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.image != null) {
                data.image = this.image;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.title.length) writer.writeString(1, this.title);
            if (this.description.length) writer.writeString(2, this.description);
            if (this.image.length) writer.writeString(3, this.image);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateBookRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new CreateBookRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.title = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.image = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateBookRequest {
            return CreateBookRequest.deserialize(bytes);
        }
    }
    export class CreateBookResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      message?: string;
                      book?: Book;
                  },
        ) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('message' in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ('book' in data && data.book != undefined) {
                    this.book = data.book;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get book() {
            return pb_1.Message.getWrapperField(this, Book, 2) as Book;
        }
        set book(value: Book) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_book() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: { message?: string; book?: ReturnType<typeof Book.prototype.toObject> }): CreateBookResponse {
            const message = new CreateBookResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.book != null) {
                message.book = Book.fromObject(data.book);
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                book?: ReturnType<typeof Book.prototype.toObject>;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.book != null) {
                data.book = this.book.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length) writer.writeString(1, this.message);
            if (this.has_book) writer.writeMessage(2, this.book, () => this.book.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateBookResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new CreateBookResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.book, () => (message.book = Book.deserialize(reader)));
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateBookResponse {
            return CreateBookResponse.deserialize(bytes);
        }
    }
    export class GetBooksRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == 'object') {
            }
        }
        static fromObject(data: {}): GetBooksRequest {
            const message = new GetBooksRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBooksRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GetBooksRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBooksRequest {
            return GetBooksRequest.deserialize(bytes);
        }
    }
    export class GetBooksResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      books?: Book[];
                  },
        ) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('books' in data && data.books != undefined) {
                    this.books = data.books;
                }
            }
        }
        get books() {
            return pb_1.Message.getRepeatedWrapperField(this, Book, 1) as Book[];
        }
        set books(value: Book[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: { books?: ReturnType<typeof Book.prototype.toObject>[] }): GetBooksResponse {
            const message = new GetBooksResponse({});
            if (data.books != null) {
                message.books = data.books.map((item) => Book.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                books?: ReturnType<typeof Book.prototype.toObject>[];
            } = {};
            if (this.books != null) {
                data.books = this.books.map((item: Book) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.books.length) writer.writeRepeatedMessage(1, this.books, (item: Book) => item.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBooksResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GetBooksResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.books, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Book.deserialize(reader), Book));
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBooksResponse {
            return GetBooksResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    export abstract class UnimplementedBookServiceService {
        static definition = {
            CreateBook: {
                path: '/book.BookService/CreateBook',
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateBookRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateBookRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateBookResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateBookResponse.deserialize(new Uint8Array(bytes)),
            },
            GetBooks: {
                path: '/book.BookService/GetBooks',
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetBooksRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetBooksRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetBooksResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetBooksResponse.deserialize(new Uint8Array(bytes)),
            },
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateBook(
            call: grpc_1.ServerUnaryCall<CreateBookRequest, CreateBookResponse>,
            callback: grpc_1.sendUnaryData<CreateBookResponse>,
        ): void;
        abstract GetBooks(call: grpc_1.ServerUnaryCall<GetBooksRequest, GetBooksResponse>, callback: grpc_1.sendUnaryData<GetBooksResponse>): void;
    }
    export class BookServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedBookServiceService.definition, 'BookService', {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateBook: GrpcUnaryServiceInterface<CreateBookRequest, CreateBookResponse> = (
            message: CreateBookRequest,
            metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateBookResponse>,
            options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateBookResponse>,
            callback?: grpc_1.requestCallback<CreateBookResponse>,
        ): grpc_1.ClientUnaryCall => {
            return super.CreateBook(message, metadata, options, callback);
        };
        GetBooks: GrpcUnaryServiceInterface<GetBooksRequest, GetBooksResponse> = (
            message: GetBooksRequest,
            metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetBooksResponse>,
            options?: grpc_1.CallOptions | grpc_1.requestCallback<GetBooksResponse>,
            callback?: grpc_1.requestCallback<GetBooksResponse>,
        ): grpc_1.ClientUnaryCall => {
            return super.GetBooks(message, metadata, options, callback);
        };
    }
}
