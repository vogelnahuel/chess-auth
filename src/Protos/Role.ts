/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: Role.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace role {
    export class CreateRoleRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): CreateRoleRequest {
            const message = new CreateRoleRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRoleRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRoleRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRoleRequest {
            return CreateRoleRequest.deserialize(bytes);
        }
    }
    export class CreateRoleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
            role?: Role;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get role() {
            return pb_1.Message.getWrapperField(this, Role, 2) as Role;
        }
        set role(value: Role) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_role() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            message?: string;
            role?: ReturnType<typeof Role.prototype.toObject>;
        }): CreateRoleResponse {
            const message = new CreateRoleResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.role != null) {
                message.role = Role.fromObject(data.role);
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                role?: ReturnType<typeof Role.prototype.toObject>;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.role != null) {
                data.role = this.role.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (this.has_role)
                writer.writeMessage(2, this.role, () => this.role.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRoleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRoleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.role, () => message.role = Role.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRoleResponse {
            return CreateRoleResponse.deserialize(bytes);
        }
    }
    export class GetRoleRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): GetRoleRequest {
            const message = new GetRoleRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRoleRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRoleRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRoleRequest {
            return GetRoleRequest.deserialize(bytes);
        }
    }
    export class GetRoleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            role?: Role;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
            }
        }
        get role() {
            return pb_1.Message.getWrapperField(this, Role, 1) as Role;
        }
        set role(value: Role) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_role() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            role?: ReturnType<typeof Role.prototype.toObject>;
        }): GetRoleResponse {
            const message = new GetRoleResponse({});
            if (data.role != null) {
                message.role = Role.fromObject(data.role);
            }
            return message;
        }
        toObject() {
            const data: {
                role?: ReturnType<typeof Role.prototype.toObject>;
            } = {};
            if (this.role != null) {
                data.role = this.role.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_role)
                writer.writeMessage(1, this.role, () => this.role.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRoleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRoleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.role, () => message.role = Role.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRoleResponse {
            return GetRoleResponse.deserialize(bytes);
        }
    }
    export class UpdateRoleRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
        }): UpdateRoleRequest {
            const message = new UpdateRoleRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateRoleRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateRoleRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateRoleRequest {
            return UpdateRoleRequest.deserialize(bytes);
        }
    }
    export class UpdateRoleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
            role?: Role;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get role() {
            return pb_1.Message.getWrapperField(this, Role, 2) as Role;
        }
        set role(value: Role) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_role() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            message?: string;
            role?: ReturnType<typeof Role.prototype.toObject>;
        }): UpdateRoleResponse {
            const message = new UpdateRoleResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.role != null) {
                message.role = Role.fromObject(data.role);
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                role?: ReturnType<typeof Role.prototype.toObject>;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.role != null) {
                data.role = this.role.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (this.has_role)
                writer.writeMessage(2, this.role, () => this.role.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateRoleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateRoleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.role, () => message.role = Role.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateRoleResponse {
            return UpdateRoleResponse.deserialize(bytes);
        }
    }
    export class DeleteRoleRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): DeleteRoleRequest {
            const message = new DeleteRoleRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRoleRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRoleRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRoleRequest {
            return DeleteRoleRequest.deserialize(bytes);
        }
    }
    export class DeleteRoleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): DeleteRoleResponse {
            const message = new DeleteRoleResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRoleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRoleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRoleResponse {
            return DeleteRoleResponse.deserialize(bytes);
        }
    }
    export class Role extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
        }): Role {
            const message = new Role({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Role {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Role();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Role {
            return Role.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedRoleServiceService {
        static definition = {
            CreateRole: {
                path: "/role.RoleService/CreateRole",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateRoleRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateRoleRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateRoleResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateRoleResponse.deserialize(new Uint8Array(bytes))
            },
            GetRole: {
                path: "/role.RoleService/GetRole",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetRoleRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetRoleRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetRoleResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetRoleResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateRole: {
                path: "/role.RoleService/UpdateRole",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateRoleRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateRoleRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateRoleResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateRoleResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteRole: {
                path: "/role.RoleService/DeleteRole",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteRoleRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteRoleRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteRoleResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteRoleResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateRole(call: grpc_1.ServerUnaryCall<CreateRoleRequest, CreateRoleResponse>, callback: grpc_1.sendUnaryData<CreateRoleResponse>): void;
        abstract GetRole(call: grpc_1.ServerUnaryCall<GetRoleRequest, GetRoleResponse>, callback: grpc_1.sendUnaryData<GetRoleResponse>): void;
        abstract UpdateRole(call: grpc_1.ServerUnaryCall<UpdateRoleRequest, UpdateRoleResponse>, callback: grpc_1.sendUnaryData<UpdateRoleResponse>): void;
        abstract DeleteRole(call: grpc_1.ServerUnaryCall<DeleteRoleRequest, DeleteRoleResponse>, callback: grpc_1.sendUnaryData<DeleteRoleResponse>): void;
    }
    export class RoleServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedRoleServiceService.definition, "RoleService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateRole: GrpcUnaryServiceInterface<CreateRoleRequest, CreateRoleResponse> = (message: CreateRoleRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateRoleResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateRoleResponse>, callback?: grpc_1.requestCallback<CreateRoleResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateRole(message, metadata, options, callback);
        };
        GetRole: GrpcUnaryServiceInterface<GetRoleRequest, GetRoleResponse> = (message: GetRoleRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetRoleResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetRoleResponse>, callback?: grpc_1.requestCallback<GetRoleResponse>): grpc_1.ClientUnaryCall => {
            return super.GetRole(message, metadata, options, callback);
        };
        UpdateRole: GrpcUnaryServiceInterface<UpdateRoleRequest, UpdateRoleResponse> = (message: UpdateRoleRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateRoleResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateRoleResponse>, callback?: grpc_1.requestCallback<UpdateRoleResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateRole(message, metadata, options, callback);
        };
        DeleteRole: GrpcUnaryServiceInterface<DeleteRoleRequest, DeleteRoleResponse> = (message: DeleteRoleRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteRoleResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteRoleResponse>, callback?: grpc_1.requestCallback<DeleteRoleResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteRole(message, metadata, options, callback);
        };
    }
}
