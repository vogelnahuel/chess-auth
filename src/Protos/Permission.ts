/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: Permission.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from 'google-protobuf';
import * as grpc_1 from '@grpc/grpc-js';
export namespace permission {
    export class CreatePermissionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      name?: string;
                  },
        ) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('name' in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: { name?: string }): CreatePermissionRequest {
            const message = new CreatePermissionRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length) writer.writeString(1, this.name);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePermissionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new CreatePermissionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePermissionRequest {
            return CreatePermissionRequest.deserialize(bytes);
        }
    }
    export class CreatePermissionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      message?: string;
                      permission?: Permission;
                  },
        ) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('message' in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ('permission' in data && data.permission != undefined) {
                    this.permission = data.permission;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get permission() {
            return pb_1.Message.getWrapperField(this, Permission, 2) as Permission;
        }
        set permission(value: Permission) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_permission() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: { message?: string; permission?: ReturnType<typeof Permission.prototype.toObject> }): CreatePermissionResponse {
            const message = new CreatePermissionResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.permission != null) {
                message.permission = Permission.fromObject(data.permission);
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                permission?: ReturnType<typeof Permission.prototype.toObject>;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.permission != null) {
                data.permission = this.permission.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length) writer.writeString(1, this.message);
            if (this.has_permission) writer.writeMessage(2, this.permission, () => this.permission.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePermissionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new CreatePermissionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.permission, () => (message.permission = Permission.deserialize(reader)));
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePermissionResponse {
            return CreatePermissionResponse.deserialize(bytes);
        }
    }
    export class GetPermissionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: number;
                  },
        ) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('id' in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: { id?: number }): GetPermissionRequest {
            const message = new GetPermissionRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0) writer.writeInt32(1, this.id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPermissionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GetPermissionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPermissionRequest {
            return GetPermissionRequest.deserialize(bytes);
        }
    }
    export class GetPermissionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      permission?: Permission;
                  },
        ) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('permission' in data && data.permission != undefined) {
                    this.permission = data.permission;
                }
            }
        }
        get permission() {
            return pb_1.Message.getWrapperField(this, Permission, 1) as Permission;
        }
        set permission(value: Permission) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_permission() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: { permission?: ReturnType<typeof Permission.prototype.toObject> }): GetPermissionResponse {
            const message = new GetPermissionResponse({});
            if (data.permission != null) {
                message.permission = Permission.fromObject(data.permission);
            }
            return message;
        }
        toObject() {
            const data: {
                permission?: ReturnType<typeof Permission.prototype.toObject>;
            } = {};
            if (this.permission != null) {
                data.permission = this.permission.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_permission) writer.writeMessage(1, this.permission, () => this.permission.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPermissionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new GetPermissionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.permission, () => (message.permission = Permission.deserialize(reader)));
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPermissionResponse {
            return GetPermissionResponse.deserialize(bytes);
        }
    }
    export class UpdatePermissionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: number;
                      name?: string;
                  },
        ) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('id' in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ('name' in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: { id?: number; name?: string }): UpdatePermissionRequest {
            const message = new UpdatePermissionRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0) writer.writeInt32(1, this.id);
            if (this.name.length) writer.writeString(2, this.name);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatePermissionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new UpdatePermissionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdatePermissionRequest {
            return UpdatePermissionRequest.deserialize(bytes);
        }
    }
    export class UpdatePermissionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      message?: string;
                      permission?: Permission;
                  },
        ) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('message' in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ('permission' in data && data.permission != undefined) {
                    this.permission = data.permission;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get permission() {
            return pb_1.Message.getWrapperField(this, Permission, 2) as Permission;
        }
        set permission(value: Permission) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_permission() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: { message?: string; permission?: ReturnType<typeof Permission.prototype.toObject> }): UpdatePermissionResponse {
            const message = new UpdatePermissionResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.permission != null) {
                message.permission = Permission.fromObject(data.permission);
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                permission?: ReturnType<typeof Permission.prototype.toObject>;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.permission != null) {
                data.permission = this.permission.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length) writer.writeString(1, this.message);
            if (this.has_permission) writer.writeMessage(2, this.permission, () => this.permission.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatePermissionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new UpdatePermissionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.permission, () => (message.permission = Permission.deserialize(reader)));
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdatePermissionResponse {
            return UpdatePermissionResponse.deserialize(bytes);
        }
    }
    export class DeletePermissionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: number;
                  },
        ) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('id' in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: { id?: number }): DeletePermissionRequest {
            const message = new DeletePermissionRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0) writer.writeInt32(1, this.id);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeletePermissionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new DeletePermissionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeletePermissionRequest {
            return DeletePermissionRequest.deserialize(bytes);
        }
    }
    export class DeletePermissionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      message?: string;
                  },
        ) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('message' in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: { message?: string }): DeletePermissionResponse {
            const message = new DeletePermissionResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length) writer.writeString(1, this.message);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeletePermissionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new DeletePermissionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeletePermissionResponse {
            return DeletePermissionResponse.deserialize(bytes);
        }
    }
    export class Permission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      id?: number;
                      name?: string;
                  },
        ) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('id' in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ('name' in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: { id?: number; name?: string }): Permission {
            const message = new Permission({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0) writer.writeInt32(1, this.id);
            if (this.name.length) writer.writeString(2, this.name);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Permission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new Permission();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Permission {
            return Permission.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    export abstract class UnimplementedPermissionServiceService {
        static definition = {
            CreatePermission: {
                path: '/permission.PermissionService/CreatePermission',
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreatePermissionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreatePermissionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreatePermissionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreatePermissionResponse.deserialize(new Uint8Array(bytes)),
            },
            GetPermission: {
                path: '/permission.PermissionService/GetPermission',
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetPermissionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetPermissionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetPermissionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetPermissionResponse.deserialize(new Uint8Array(bytes)),
            },
            UpdatePermission: {
                path: '/permission.PermissionService/UpdatePermission',
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdatePermissionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdatePermissionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdatePermissionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdatePermissionResponse.deserialize(new Uint8Array(bytes)),
            },
            DeletePermission: {
                path: '/permission.PermissionService/DeletePermission',
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeletePermissionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeletePermissionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeletePermissionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeletePermissionResponse.deserialize(new Uint8Array(bytes)),
            },
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreatePermission(
            call: grpc_1.ServerUnaryCall<CreatePermissionRequest, CreatePermissionResponse>,
            callback: grpc_1.sendUnaryData<CreatePermissionResponse>,
        ): void;
        abstract GetPermission(
            call: grpc_1.ServerUnaryCall<GetPermissionRequest, GetPermissionResponse>,
            callback: grpc_1.sendUnaryData<GetPermissionResponse>,
        ): void;
        abstract UpdatePermission(
            call: grpc_1.ServerUnaryCall<UpdatePermissionRequest, UpdatePermissionResponse>,
            callback: grpc_1.sendUnaryData<UpdatePermissionResponse>,
        ): void;
        abstract DeletePermission(
            call: grpc_1.ServerUnaryCall<DeletePermissionRequest, DeletePermissionResponse>,
            callback: grpc_1.sendUnaryData<DeletePermissionResponse>,
        ): void;
    }
    export class PermissionServiceClient extends grpc_1.makeGenericClientConstructor(
        UnimplementedPermissionServiceService.definition,
        'PermissionService',
        {},
    ) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreatePermission: GrpcUnaryServiceInterface<CreatePermissionRequest, CreatePermissionResponse> = (
            message: CreatePermissionRequest,
            metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreatePermissionResponse>,
            options?: grpc_1.CallOptions | grpc_1.requestCallback<CreatePermissionResponse>,
            callback?: grpc_1.requestCallback<CreatePermissionResponse>,
        ): grpc_1.ClientUnaryCall => {
            return super.CreatePermission(message, metadata, options, callback);
        };
        GetPermission: GrpcUnaryServiceInterface<GetPermissionRequest, GetPermissionResponse> = (
            message: GetPermissionRequest,
            metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetPermissionResponse>,
            options?: grpc_1.CallOptions | grpc_1.requestCallback<GetPermissionResponse>,
            callback?: grpc_1.requestCallback<GetPermissionResponse>,
        ): grpc_1.ClientUnaryCall => {
            return super.GetPermission(message, metadata, options, callback);
        };
        UpdatePermission: GrpcUnaryServiceInterface<UpdatePermissionRequest, UpdatePermissionResponse> = (
            message: UpdatePermissionRequest,
            metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdatePermissionResponse>,
            options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdatePermissionResponse>,
            callback?: grpc_1.requestCallback<UpdatePermissionResponse>,
        ): grpc_1.ClientUnaryCall => {
            return super.UpdatePermission(message, metadata, options, callback);
        };
        DeletePermission: GrpcUnaryServiceInterface<DeletePermissionRequest, DeletePermissionResponse> = (
            message: DeletePermissionRequest,
            metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeletePermissionResponse>,
            options?: grpc_1.CallOptions | grpc_1.requestCallback<DeletePermissionResponse>,
            callback?: grpc_1.requestCallback<DeletePermissionResponse>,
        ): grpc_1.ClientUnaryCall => {
            return super.DeletePermission(message, metadata, options, callback);
        };
    }
}
